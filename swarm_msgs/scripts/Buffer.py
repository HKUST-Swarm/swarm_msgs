"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import Time_t

class Buffer(object):
    __slots__ = ["timestamp", "drone_id", "msg_id", "msg_len", "buffer"]

    __typenames__ = ["Time_t", "int32_t", "int32_t", "int32_t", "byte"]

    __dimensions__ = [None, None, None, None, ["msg_len"]]

    def __init__(self):
        self.timestamp = Time_t()
        self.drone_id = 0
        self.msg_id = 0
        self.msg_len = 0
        self.buffer = ""

    def encode(self):
        buf = BytesIO()
        buf.write(Buffer._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.timestamp._get_packed_fingerprint() == Time_t._get_packed_fingerprint()
        self.timestamp._encode_one(buf)
        buf.write(struct.pack(">iii", self.drone_id, self.msg_id, self.msg_len))
        buf.write(bytearray(self.buffer[:self.msg_len]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Buffer._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Buffer._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Buffer()
        self.timestamp = Time_t._decode_one(buf)
        self.drone_id, self.msg_id, self.msg_len = struct.unpack(">iii", buf.read(12))
        self.buffer = buf.read(self.msg_len)
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Buffer in parents: return 0
        newparents = parents + [Buffer]
        tmphash = (0x24204c71afb3b9be+ Time_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Buffer._packed_fingerprint is None:
            Buffer._packed_fingerprint = struct.pack(">Q", Buffer._get_hash_recursive([]))
        return Buffer._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Buffer._get_packed_fingerprint())[0]


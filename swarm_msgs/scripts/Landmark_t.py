"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import Time_t

import LandmarkCompact_t

class Landmark_t(object):
    __slots__ = ["frame_id", "camera_id", "drone_id", "type", "timestamp", "camera_index", "cur_td", "compact"]

    __typenames__ = ["int32_t", "int32_t", "int8_t", "int8_t", "Time_t", "int8_t", "float", "LandmarkCompact_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None]

    def __init__(self):
        self.frame_id = 0
        self.camera_id = 0
        self.drone_id = 0
        self.type = 0
        self.timestamp = Time_t()
        self.camera_index = 0
        self.cur_td = 0.0
        self.compact = LandmarkCompact_t()

    def encode(self):
        buf = BytesIO()
        buf.write(Landmark_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iibb", self.frame_id, self.camera_id, self.drone_id, self.type))
        assert self.timestamp._get_packed_fingerprint() == Time_t._get_packed_fingerprint()
        self.timestamp._encode_one(buf)
        buf.write(struct.pack(">bf", self.camera_index, self.cur_td))
        assert self.compact._get_packed_fingerprint() == LandmarkCompact_t._get_packed_fingerprint()
        self.compact._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Landmark_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Landmark_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Landmark_t()
        self.frame_id, self.camera_id, self.drone_id, self.type = struct.unpack(">iibb", buf.read(10))
        self.timestamp = Time_t._decode_one(buf)
        self.camera_index, self.cur_td = struct.unpack(">bf", buf.read(5))
        self.compact = LandmarkCompact_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if Landmark_t in parents: return 0
        newparents = parents + [Landmark_t]
        tmphash = (0x8307ec673b387d0b+ Time_t._get_hash_recursive(newparents)+ LandmarkCompact_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Landmark_t._packed_fingerprint is None:
            Landmark_t._packed_fingerprint = struct.pack(">Q", Landmark_t._get_hash_recursive([]))
        return Landmark_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)


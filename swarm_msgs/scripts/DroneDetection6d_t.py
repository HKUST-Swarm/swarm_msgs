"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import Point3d_t

import Time_t

import Pose_t

class DroneDetection6d_t(object):
    __slots__ = ["ts", "id", "drone_id_a", "drone_id_b", "keyframe_id_a", "keyframe_id_b", "relative_pose", "self_pose_a", "pos_cov", "ang_cov"]

    __typenames__ = ["Time_t", "int64_t", "int32_t", "int32_t", "int32_t", "int32_t", "Pose_t", "Pose_t", "Point3d_t", "Point3d_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.ts = Time_t()
        self.id = 0
        self.drone_id_a = 0
        self.drone_id_b = 0
        self.keyframe_id_a = 0
        self.keyframe_id_b = 0
        self.relative_pose = Pose_t()
        self.self_pose_a = Pose_t()
        self.pos_cov = Point3d_t()
        self.ang_cov = Point3d_t()

    def encode(self):
        buf = BytesIO()
        buf.write(DroneDetection6d_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.ts._get_packed_fingerprint() == Time_t._get_packed_fingerprint()
        self.ts._encode_one(buf)
        buf.write(struct.pack(">qiiii", self.id, self.drone_id_a, self.drone_id_b, self.keyframe_id_a, self.keyframe_id_b))
        assert self.relative_pose._get_packed_fingerprint() == Pose_t._get_packed_fingerprint()
        self.relative_pose._encode_one(buf)
        assert self.self_pose_a._get_packed_fingerprint() == Pose_t._get_packed_fingerprint()
        self.self_pose_a._encode_one(buf)
        assert self.pos_cov._get_packed_fingerprint() == Point3d_t._get_packed_fingerprint()
        self.pos_cov._encode_one(buf)
        assert self.ang_cov._get_packed_fingerprint() == Point3d_t._get_packed_fingerprint()
        self.ang_cov._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != DroneDetection6d_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return DroneDetection6d_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = DroneDetection6d_t()
        self.ts = Time_t._decode_one(buf)
        self.id, self.drone_id_a, self.drone_id_b, self.keyframe_id_a, self.keyframe_id_b = struct.unpack(">qiiii", buf.read(24))
        self.relative_pose = Pose_t._decode_one(buf)
        self.self_pose_a = Pose_t._decode_one(buf)
        self.pos_cov = Point3d_t._decode_one(buf)
        self.ang_cov = Point3d_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if DroneDetection6d_t in parents: return 0
        newparents = parents + [DroneDetection6d_t]
        tmphash = (0x1542d5c815f877c3+ Time_t._get_hash_recursive(newparents)+ Pose_t._get_hash_recursive(newparents)+ Pose_t._get_hash_recursive(newparents)+ Point3d_t._get_hash_recursive(newparents)+ Point3d_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if DroneDetection6d_t._packed_fingerprint is None:
            DroneDetection6d_t._packed_fingerprint = struct.pack(">Q", DroneDetection6d_t._get_hash_recursive([]))
        return DroneDetection6d_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", DroneDetection6d_t._get_packed_fingerprint())[0]


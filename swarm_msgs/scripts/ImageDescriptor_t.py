"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import Landmark_t

import ImageDescriptorHeader_t

class ImageDescriptor_t(object):
    __slots__ = ["header", "landmark_descriptor_size", "landmark_descriptor", "landmark_descriptor_size_int8", "landmark_descriptor_int8", "landmark_scores_size", "landmark_scores", "image_width", "image_height", "image_size", "image", "landmark_num", "landmarks"]

    __typenames__ = ["ImageDescriptorHeader_t", "int32_t", "float", "int32_t", "int8_t", "int32_t", "float", "int32_t", "int32_t", "int32_t", "byte", "int32_t", "Landmark_t"]

    __dimensions__ = [None, None, ["landmark_descriptor_size"], None, ["landmark_descriptor_size_int8"], None, ["landmark_scores_size"], None, None, None, ["image_size"], None, ["landmark_num"]]

    def __init__(self):
        self.header = ImageDescriptorHeader_t()
        self.landmark_descriptor_size = 0
        self.landmark_descriptor = []
        self.landmark_descriptor_size_int8 = 0
        self.landmark_descriptor_int8 = []
        self.landmark_scores_size = 0
        self.landmark_scores = []
        self.image_width = 0
        self.image_height = 0
        self.image_size = 0
        self.image = ""
        self.landmark_num = 0
        self.landmarks = []

    def encode(self):
        buf = BytesIO()
        buf.write(ImageDescriptor_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == ImageDescriptorHeader_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">i", self.landmark_descriptor_size))
        buf.write(struct.pack('>%df' % self.landmark_descriptor_size, *self.landmark_descriptor[:self.landmark_descriptor_size]))
        buf.write(struct.pack(">i", self.landmark_descriptor_size_int8))
        buf.write(struct.pack('>%db' % self.landmark_descriptor_size_int8, *self.landmark_descriptor_int8[:self.landmark_descriptor_size_int8]))
        buf.write(struct.pack(">i", self.landmark_scores_size))
        buf.write(struct.pack('>%df' % self.landmark_scores_size, *self.landmark_scores[:self.landmark_scores_size]))
        buf.write(struct.pack(">iii", self.image_width, self.image_height, self.image_size))
        buf.write(bytearray(self.image[:self.image_size]))
        buf.write(struct.pack(">i", self.landmark_num))
        for i0 in range(self.landmark_num):
            assert self.landmarks[i0]._get_packed_fingerprint() == Landmark_t._get_packed_fingerprint()
            self.landmarks[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ImageDescriptor_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ImageDescriptor_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ImageDescriptor_t()
        self.header = ImageDescriptorHeader_t._decode_one(buf)
        self.landmark_descriptor_size = struct.unpack(">i", buf.read(4))[0]
        self.landmark_descriptor = struct.unpack('>%df' % self.landmark_descriptor_size, buf.read(self.landmark_descriptor_size * 4))
        self.landmark_descriptor_size_int8 = struct.unpack(">i", buf.read(4))[0]
        self.landmark_descriptor_int8 = struct.unpack('>%db' % self.landmark_descriptor_size_int8, buf.read(self.landmark_descriptor_size_int8))
        self.landmark_scores_size = struct.unpack(">i", buf.read(4))[0]
        self.landmark_scores = struct.unpack('>%df' % self.landmark_scores_size, buf.read(self.landmark_scores_size * 4))
        self.image_width, self.image_height, self.image_size = struct.unpack(">iii", buf.read(12))
        self.image = buf.read(self.image_size)
        self.landmark_num = struct.unpack(">i", buf.read(4))[0]
        self.landmarks = []
        for i0 in range(self.landmark_num):
            self.landmarks.append(Landmark_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if ImageDescriptor_t in parents: return 0
        newparents = parents + [ImageDescriptor_t]
        tmphash = (0x2a09ee1712d1401+ ImageDescriptorHeader_t._get_hash_recursive(newparents)+ Landmark_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ImageDescriptor_t._packed_fingerprint is None:
            ImageDescriptor_t._packed_fingerprint = struct.pack(">Q", ImageDescriptor_t._get_hash_recursive([]))
        return ImageDescriptor_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ImageDescriptor_t._get_packed_fingerprint())[0]


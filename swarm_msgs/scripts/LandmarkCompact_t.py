"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import Point2f_t

import Time_t

import Point3f_t

class LandmarkCompact_t(object):
    __slots__ = ["landmark_id", "stamp_discover", "pt2d", "pt3d_norm", "pt3d", "flag", "velocity", "depth_mea", "depth"]

    __typenames__ = ["int32_t", "Time_t", "Point2f_t", "Point3f_t", "Point3f_t", "int8_t", "Point3f_t", "boolean", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.landmark_id = 0
        self.stamp_discover = Time_t()
        self.pt2d = Point2f_t()
        self.pt3d_norm = Point3f_t()
        self.pt3d = Point3f_t()
        self.flag = 0
        self.velocity = Point3f_t()
        self.depth_mea = False
        self.depth = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(LandmarkCompact_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.landmark_id))
        assert self.stamp_discover._get_packed_fingerprint() == Time_t._get_packed_fingerprint()
        self.stamp_discover._encode_one(buf)
        assert self.pt2d._get_packed_fingerprint() == Point2f_t._get_packed_fingerprint()
        self.pt2d._encode_one(buf)
        assert self.pt3d_norm._get_packed_fingerprint() == Point3f_t._get_packed_fingerprint()
        self.pt3d_norm._encode_one(buf)
        assert self.pt3d._get_packed_fingerprint() == Point3f_t._get_packed_fingerprint()
        self.pt3d._encode_one(buf)
        buf.write(struct.pack(">b", self.flag))
        assert self.velocity._get_packed_fingerprint() == Point3f_t._get_packed_fingerprint()
        self.velocity._encode_one(buf)
        buf.write(struct.pack(">bf", self.depth_mea, self.depth))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != LandmarkCompact_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return LandmarkCompact_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = LandmarkCompact_t()
        self.landmark_id = struct.unpack(">i", buf.read(4))[0]
        self.stamp_discover = Time_t._decode_one(buf)
        self.pt2d = Point2f_t._decode_one(buf)
        self.pt3d_norm = Point3f_t._decode_one(buf)
        self.pt3d = Point3f_t._decode_one(buf)
        self.flag = struct.unpack(">b", buf.read(1))[0]
        self.velocity = Point3f_t._decode_one(buf)
        self.depth_mea = bool(struct.unpack('b', buf.read(1))[0])
        self.depth = struct.unpack(">f", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if LandmarkCompact_t in parents: return 0
        newparents = parents + [LandmarkCompact_t]
        tmphash = (0x8ee86c833f01b376+ Time_t._get_hash_recursive(newparents)+ Point2f_t._get_hash_recursive(newparents)+ Point3f_t._get_hash_recursive(newparents)+ Point3f_t._get_hash_recursive(newparents)+ Point3f_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if LandmarkCompact_t._packed_fingerprint is None:
            LandmarkCompact_t._packed_fingerprint = struct.pack(">Q", LandmarkCompact_t._get_hash_recursive([]))
        return LandmarkCompact_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)


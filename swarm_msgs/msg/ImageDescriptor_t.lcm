struct Pose_t {
    double   position[3];
    double   orientation[4]; 
}

struct Point2d_t {
    double x;
    double y;
}

struct Point3d_t {
    double x;
    double y;
    double z;
}

struct Point2f_t {
    float x;
    float y;
}

struct Point3f_t {
    float x;
    float y;
    float z;
}


struct Time_t {
    int32_t sec;
    int32_t nsec;
}

struct IMUData_t {
    Time_t timestamp;
    double dt;
    Point3d_t acc;
    Point3d_t gyro;
}

struct ImageDescriptorHeader_t {
    Time_t  timestamp;
    int32_t drone_id;
    int64_t matched_frame;
    int32_t matched_drone;
    boolean is_lazy_frame;
    int32_t image_desc_size;
    float image_desc[image_desc_size];
    int32_t image_desc_size_int8;
    int8_t image_desc_int8[image_desc_size_int8];
    Pose_t pose_drone;
    Pose_t camera_extrinsic;
    boolean prevent_adding_db;
    int64_t msg_id;
    int64_t frame_id;
    int32_t feature_num;
    int32_t camera_index;
}

struct SlidingWindow_t {
    Time_t timestamp;
    int32_t drone_id;
    int32_t sld_win_len;
    int64_t frame_ids[sld_win_len];
}

struct Landmark_t {
    int32_t frame_id;
    int32_t camera_id;
    int8_t drone_id;
    int8_t type;
    Time_t timestamp;
    int8_t camera_index;
    float cur_td;
    LandmarkCompact_t compact;
}


struct LandmarkCompact_t {
    int32_t landmark_id;
    Time_t stamp_discover;
    Point2f_t pt2d;
    Point3f_t pt3d_norm;
    Point3f_t pt3d;
    int8_t flag;
    Point3f_t velocity;
    boolean depth_mea;
    float depth;
}

struct LandmarkDescriptor_t {
    //MTU is 2304, better make it lower than 2000 byte
    LandmarkCompact_t landmark;
    int32_t desc_len;
    float landmark_descriptor[desc_len];
    int32_t desc_len_int8;
    int8_t landmark_descriptor_int8[desc_len_int8];
    int64_t msg_id;
    int64_t header_id;
}

struct LandmarkDescriptorPacket_t {
    //MTU is 2304, better make it lower than 2000 byte
    int32_t drone_id;
    int32_t landmark_num;
    LandmarkDescriptor_t landmarks[landmark_num];
}

struct ImageDescriptor_t {
    Time_t  timestamp;
    int32_t drone_id;
    int32_t is_lazy_frame;
    int64_t matched_frame;
    int32_t matched_drone;
    int32_t landmark_descriptor_size;
    float landmark_descriptor[landmark_descriptor_size];
    int32_t landmark_descriptor_size_int8;
    int8_t landmark_descriptor_int8[landmark_descriptor_size_int8];
    int32_t landmark_scores_size;
    float landmark_scores[landmark_scores_size];

    int32_t image_desc_size;
    float image_desc[image_desc_size];
    float cur_td;
    int32_t image_desc_size_int8;
    int8_t image_desc_int8[image_desc_size_int8];

    int32_t image_width;
    int32_t image_height;
    int32_t image_size;
    byte image[image_size];
    int32_t camera_index;
    int32_t camera_id;

    Pose_t pose_drone;

    Pose_t camera_extrinsic;

    int32_t landmark_num;
    
    Landmark_t landmarks[landmark_num];
    
    boolean prevent_adding_db;
    int64_t msg_id;
    int64_t frame_id;
}

struct ImageArrayDescriptor_t {
    int64_t msg_id;
    int64_t frame_id;
    int64_t matched_frame;
    int32_t matched_drone;
    int32_t image_num;
    int32_t reference_frame_id;
    boolean prevent_adding_db;
    int32_t landmark_num;
    int32_t drone_id;
    int32_t is_lazy_frame;
    Time_t  timestamp;
    Pose_t pose_drone;
    boolean is_keyframe;
    ImageDescriptor_t images[image_num];
    int32_t imu_buf_size;
    IMUData_t imu_buf[imu_buf_size];
    Point3d_t Ba;
    Point3d_t Bg;
    SlidingWindow_t sld_win_status;
    float cur_td;
}

struct LoopEdge_t {
    Time_t ts_a;
    Time_t ts_b;
    int64_t id;
    int32_t drone_id_a;
    int32_t drone_id_b;

    int32_t keyframe_id_a;
    int32_t keyframe_id_b;

    Pose_t relative_pose;
    Pose_t self_pose_a;
    Pose_t self_pose_b;
    int32_t pnp_inlier_num;
    Point3d_t pos_cov;
    Point3d_t ang_cov;
}

struct DroneDetection6d_t {
    Time_t ts;
    int64_t id;
    int32_t drone_id_a;
    int32_t drone_id_b;
    
    int32_t keyframe_id_a;
    int32_t keyframe_id_b;

    Pose_t relative_pose;
    Pose_t self_pose_a;
    Point3d_t pos_cov;
    Point3d_t ang_cov;
}

struct LoopInliers_t {
    Time_t ts;

    int32_t sender_id;

    int32_t drone_id_a;
    int32_t drone_id_b;
    
    int32_t inlier_id_size;
    int64_t inlier_ids[inlier_id_size];
}

struct DistributedVinsData_t {
    Time_t timestamp;
    int32_t drone_id;
    int32_t sld_win_len;
    int64_t frame_ids[sld_win_len];
    Pose_t frame_poses[sld_win_len];
    int32_t camera_num;
    int64_t cam_ids[camera_num];
    Pose_t extrinsic[camera_num];
    int32_t remote_drone_num;
    int64_t remote_drone_ids[remote_drone_num];
    Pose_t relative_coordinates[remote_drone_num];
    int64_t solver_token;
    int32_t iteration_count;
}

struct DistributedSync_t {
    Time_t timestamp;
    int32_t drone_id;
    int32_t sync_signal;
    int64_t solver_token;
}

struct Vector_t {
    int32_t size;
    double data[size];
}

struct DistributedPGOData_t {
    Time_t timestamp;
    int32_t drone_id;
    int32_t target_id;
    int32_t reference_frame_id;
    int32_t type;
    int32_t frame_num;
    int64_t frame_ids[frame_num];
    int32_t frame_poses_num;
    Pose_t frame_poses[frame_poses_num];
    int32_t frame_dual_num;
    Vector_t frame_duals[frame_dual_num];
    int64_t solver_token;
    int32_t iteration_count;
}

struct Buffer {
    Time_t timestamp;
    int32_t drone_id;
    int32_t msg_id;
    int32_t msg_len;
    byte buffer[msg_len];
}
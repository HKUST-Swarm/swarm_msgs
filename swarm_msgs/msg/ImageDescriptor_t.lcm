struct Pose_t {
    double   position[3];
    double   orientation[4]; 
}

struct Point2d_t {
    double x;
    double y;
}

struct Point3d_t {
    double x;
    double y;
    double z;
}

struct Time_t {
    int32_t sec;
    int32_t nsec;
}

struct IMUData_t {
    Time_t timestamp;
    double dt;
    Point3d_t acc;
    Point3d_t gyro;
}

struct ImageDescriptorHeader_t {
    Time_t  timestamp;
    int32_t drone_id;

    int32_t image_desc_size;
    float image_desc[image_desc_size];
    Pose_t pose_drone;
    Pose_t camera_extrinsic;
    boolean prevent_adding_db;
    int64_t msg_id;
    int64_t frame_id;
    int32_t feature_num;
    int32_t camera_index;
}

struct Landmark_t {
    int32_t frame_id;
    int32_t landmark_id;
    int32_t drone_id;
    int32_t type;
    Time_t timestamp;
    int32_t camera_index;
    int32_t camera_id;
    double cur_td;
    int32_t flag;
    Point2d_t pt2d;
    Point3d_t pt3d_norm;
    Point3d_t pt3d;
    Point3d_t velocity;
    boolean depth_mea;
    double depth;
}

struct LandmarkDescriptor_t {
    //MTU is 2304, better make it lower than 2000 byte
    Landmark_t landmark;
    int32_t desc_len;
    float landmark_descriptor[desc_len];
    int64_t msg_id;
    int64_t header_id;
}

struct LandmarkDescriptorPacket_t {
    //MTU is 2304, better make it lower than 2000 byte
    int32_t drone_id;
    int32_t landmark_num;
    LandmarkDescriptor_t landmarks[landmark_num];
}

struct ImageDescriptor_t {
    Time_t  timestamp;
    int32_t drone_id;

    int32_t landmark_descriptor_size;
    float landmark_descriptor[landmark_descriptor_size];

    int32_t image_desc_size;
    float image_desc[image_desc_size];

    int32_t image_width;
    int32_t image_height;
    int32_t image_size;
    byte image[image_size];
    int32_t camera_index;
    int32_t camera_id;

    Pose_t pose_drone;

    Pose_t camera_extrinsic;

    int32_t landmark_num;
    
    Landmark_t landmarks[landmark_num];
    
    boolean prevent_adding_db;
    int64_t msg_id;
    int64_t frame_id;
}

struct ImageArrayDescriptor_t {
    int64_t msg_id;
    int64_t frame_id;
    int32_t image_num;
    boolean prevent_adding_db;
    int32_t landmark_num;
    int32_t drone_id;
    Time_t  timestamp;
    Pose_t pose_drone;
    boolean is_keyframe;
    ImageDescriptor_t images[image_num];
    int32_t imu_buf_size;
    IMUData_t imu_buf[imu_buf_size];
    Point3d_t Ba;
    Point3d_t Bg;
}

struct LoopEdge_t {
    Time_t ts_a;
    Time_t ts_b;
    int64_t id;
    int32_t drone_id_a;
    int32_t drone_id_b;

    int32_t keyframe_id_a;
    int32_t keyframe_id_b;

    Pose_t relative_pose;
    Pose_t self_pose_a;
    Pose_t self_pose_b;
    int32_t pnp_inlier_num;
    Point3d_t pos_cov;
    Point3d_t ang_cov;
}

struct DroneDetection6d_t {
    Time_t ts;
    int64_t id;
    int32_t drone_id_a;
    int32_t drone_id_b;
    
    int32_t keyframe_id_a;
    int32_t keyframe_id_b;

    Pose_t relative_pose;
    Pose_t self_pose_a;
    Point3d_t pos_cov;
    Point3d_t ang_cov;
}

struct LoopInliers_t {
    Time_t ts;

    int32_t sender_id;

    int32_t drone_id_a;
    int32_t drone_id_b;
    
    int32_t inlier_id_size;
    int64_t inlier_ids[inlier_id_size];
}

struct SlidingWindow_t {
    Time_t timestamp;
    int32_t drone_id;
    int32_t sld_win_len;
    int64_t frame_ids[sld_win_len];
}